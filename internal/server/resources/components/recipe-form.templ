package components

import (
	"fmt"
	"github.com/asek-ll/aecc-server/internal/dao"
	"strconv"
)

func groupId(id string) string {
	return fmt.Sprintf("group-%s", id)
}

script removeElement(id string) {
    document.getElementById(id).outerHTML = ''
}

templ ItemInputs(id string, item dao.RecipeItem) {
	<fieldset id={ groupId(id) } class="grid">
		<input type="hidden" name={ fmt.Sprintf("item_%s", id) } value={ item.ItemUID }/>
		if item.Slot != nil {
			<input type="hidden" name={ fmt.Sprintf("slot_%s", id) } value={ strconv.Itoa(*item.Slot) }/>
		}
		<input type="hidden" name={ fmt.Sprintf("role_%s", id) } value={ item.Role }/>
		<input name={ fmt.Sprintf("amount_%s", id) } placeholder="Amount" style="width: 5em" value={ strconv.Itoa(item.Amount) }/>
		@ItemIconByUID(item.ItemUID)
		<button type="button" hx-on:click={ removeElement(groupId(id)) }>Del</button>
	</fieldset>
}

templ shapedRecipeItem(slot int) {
	<div id={ fmt.Sprintf("slot%ditem", slot) }>
		{ children... }
	</div>
	<button
		type="button"
		hx-get={ fmt.Sprintf("/item-popup?slot=%d&role=ingredient", slot) }
		hx-target={ fmt.Sprintf("#slot%ditem", slot) }
		hx-swap="innerHtml"
	>Set</button>
}

func shapedRecipeItemWrap(items []dao.RecipeItem, slot int) templ.Component {
	var itemInSlot *dao.RecipeItem
	for _, item := range items {
		if item.Slot != nil && *item.Slot == slot {
			itemInSlot = &item
			break
		}
	}
	if itemInSlot == nil {
		return shapedRecipeItem(slot)
	}
	id := fmt.Sprintf("is%d", slot)

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		withChildren := templ.WithChildren(ctx, ItemInputs(id, *itemInSlot))
		return shapedRecipeItem(slot).Render(withChildren, w)
	})
}

templ RecipeForm(recipe *dao.Recipe) {
	<form method="post">
		<fieldset>
			<label>
				Name
				<input name="name" placeholder="Name" value={ recipe.Name }/>
			</label>
			<label>
				Type
				<select name="type" aria-label="Select type...">
					<option></option>
					<option>wire</option>
					<option>rod</option>
					<option>smelter</option>
				</select>
			</label>
		</fieldset>
		<div>
			<div>
				<h2>Results</h2>
				<button type="button" hx-get="/item-popup?role=result" hx-target="this" hx-swap="beforebegin">Add</button>
				for i, recipeItem := range recipe.Results {
					@ItemInputs(fmt.Sprintf("r%d", i), recipeItem)
				}
			</div>
			<div>
				<h2>Ingredients</h2>
				<div>
					<h3>Shapeless</h3>
					<button type="button" hx-get="/item-popup?role=ingredient" hx-target="this" hx-swap="beforebegin">Add</button>
					for i, recipeItem := range recipe.Ingredients {
						if recipeItem.Slot == nil {
							@ItemInputs(fmt.Sprintf("i%d", i), recipeItem)
						}
					}
				</div>
				<div>
					<h3>Shaped</h3>
					<table>
						<tbody>
							<tr>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 1)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 2)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 3)
								</td>
							</tr>
							<tr>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 4)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 5)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 6)
								</td>
							</tr>
							<tr>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 7)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 8)
								</td>
								<td>
									@shapedRecipeItemWrap(recipe.Ingredients, 9)
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
		<input type="submit" value="Create"/>
	</form>
}
