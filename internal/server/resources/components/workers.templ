package components

import (
	"fmt"
	"github.com/asek-ll/aecc-server/internal/dao"
	"github.com/asek-ll/aecc-server/internal/services/worker"
)

templ WorkersPage(workers []dao.Worker) {
	@Page("Workers") {
		<a href="/workers-new/">New worker</a>
		<div id="workers-list">
			@WorkersList(workers)
		</div>
	}
}

templ NewWorkerConfigForm(params *worker.WorkerParams) {
	if params.Type == dao.WORKER_TYPE_IMPORTER {
		@ImporterWorkerConfigFields(params.Config.Importer)
	} else if params.Type == dao.WORKER_TYPE_EXPORTER {
		@ExporterWorkerConfigFields(params.Config.Exporter)
	} else if params.Type == dao.WORKER_TYPE_PROCESSING_CRAFTER {
		@ProcessingCrafterWorkerConfigFields(params.Config.ProcessingCrafter)
	}
}

templ ImporterWorkerConfigFields(params *worker.ImporterWorkerConfigParams) {
	<importer-configs>
		<button class="add-worker">Add</button>
		for i, importConfig := range params.Imports {
			<importer-config
				idx={ fmt.Sprintf("%d", i) }
				storage={ importConfig.Storage }
				slot={ importConfig.Slot }
			></importer-config>
		}
	</importer-configs>
	<button type="submit">Create</button>
}

templ ExporterWorkerConfigFields(params *worker.ExporterWorkerConfigParams) {
	<exporter-configs>
		<button class="add-worker">Add</button>
		for i, exportConfig := range params.Exports {
			<exporter-config
				idx={ fmt.Sprintf("%d", i) }
				storage={ exportConfig.Storage }
				item={ itemJsonByUid(ctx, exportConfig.Item) }
				slot={ exportConfig.Slot }
				amount={ exportConfig.Amount }
			></exporter-config>
		}
	</exporter-configs>
	<button type="submit">Create</button>
}

templ ProcessingCrafterWorkerConfigFields(params *dao.ProcessingCrafterWorkerConfig) {
	<label>
		Craft type
		<input type="text" name="craftType" value={ params.CraftType }/>
	</label>
	<label>
		Ingredient storage
		<input type="text" name="inputStorage" value={ params.InputStorage }/>
	</label>
	<label>
		Ingredient mode
		<select name="reagentMode" required>
			<option
				if params.ReagentMode == "ignore" {
					selected
				}
			>ignore</option>
			<option
				if params.ReagentMode == "block" {
					selected
				}
			>block</option>
		</select>
	</label>
	<button type="submit">Create</button>
}

templ NewWorkerPage(params *worker.WorkerParams, errMsg string) {
	@Page("New worker") {
		if errMsg != "" {
			<div class="error">{ errMsg }</div>
		}
		<form method="post" id="worker-form">
			<label>
				Key
				<input type="text" name="key" value={ params.Key }/>
			</label>
			<label>
				Type
				<select
					name="type"
					required
					hx-get="/workers-new/config"
					hx-target="#worker-config"
				>
					<option></option>
					for _, t := range dao.WORKER_TYPES {
						<option
							value={ t }
							if t == params.Type {
								selected
							}
						>{ t }</option>
					}
				</select>
			</label>
			<div id="worker-config">
				@NewWorkerConfigForm(params)
			</div>
		</form>
	}
}

templ WorkersList(workers []dao.Worker) {
	<table>
		for _, worker := range workers {
			@WorkersListItem(&worker)
		}
	</table>
}

templ WorkersListItem(worker *dao.Worker) {
	<tr>
		<td>
			<a href={ templ.URL(fmt.Sprintf("/workers/%s", worker.Key)) }>{ worker.Key } </a>
		</td>
		<td>
			{ worker.Type }
		</td>
		<td>
			<button hx-delete={ fmt.Sprintf("/workers/%s", worker.Key) }>Del</button>
		</td>
	</tr>
}
